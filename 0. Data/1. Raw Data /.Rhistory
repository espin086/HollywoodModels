else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
#Create data in forms of returns
library(zoo)
library(reshape)
#Calculating daily gains or loss percentage
tickers <- names(stocks)
for (i in 1:length(tickers)){
stocks[i] <- Delt(stocks[i])
}
stocks[7] <- lag(zoo(stocks[1]), -1, na.pad = TRUE)
View(stocks)
names(stocks)
names(stocks) <- paste("a", "b")
View(stocks)
library(DataCombine)
install.packages("DataCombine")
names(stocks[1])
## downloads historic prices for all constituents of SP500
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
#Setting Working Directory
## specify time period
dateStart <- "2012-01-01"
dateEnd <- Sys.Date()
## extract symbols and number of iterations
symbols <- c("DIS", "CMCSA", "TWX", "SNE", "FOXA", "VIAB")
nAss <- length(symbols)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = symbols[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(symbols[1])
## download remaining assets in for loop
for (i in 2:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = symbols[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
stocks <- slide(stocks, Var = stocks[1], slideBy = -1)
library(DataCombine)
stocks <- slide(stocks, Var = stocks[1], slideBy = -1)
names(stocks)
names(stocks[1])
stocks <- slide(stocks, Var = names(stocks[1]), slideBy = -1)
View(stocks)
## downloads historic prices for all constituents of SP500
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
#Setting Working Directory
## specify time period
dateStart <- "2012-01-01"
dateEnd <- Sys.Date()
## extract symbols and number of iterations
symbols <- c("DIS", "CMCSA", "TWX", "SNE", "FOXA", "VIAB")
nAss <- length(symbols)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = symbols[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(symbols[1])
## download remaining assets in for loop
for (i in 2:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = symbols[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
#Create data in forms of returns
library(zoo)
library(reshape)
library(DataCombine)
#Calculating daily gains or loss percentage
tickers <- names(stocks)
for (i in 1:length(tickers)){
stocks[i] <- Delt(stocks[i])
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -1)
}
View(stocks)
#Create data in forms of returns
library(zoo)
library(reshape)
library(DataCombine)
#Calculating daily gains or loss percentage
tickers <- names(stocks)
for (i in 1:length(tickers)){
stocks[i] <- Delt(stocks[i])
for (j = -1:-6){
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -j)
}
}
for (i in 1:length(tickers)){
stocks[i] <- Delt(stocks[i])
for (j in -1:-6){
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -j)
}
}
View(stocks)
## downloads historic prices for all constituents of SP500
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
#Setting Working Directory
## specify time period
dateStart <- "2012-01-01"
dateEnd <- Sys.Date()
## extract symbols and number of iterations
symbols <- c("DIS", "CMCSA", "TWX", "SNE", "FOXA", "VIAB")
nAss <- length(symbols)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = symbols[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(symbols[1])
## download remaining assets in for loop
for (i in 2:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = symbols[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
#Create data in forms of returns
library(zoo)
library(reshape)
library(DataCombine)
#Calculating daily gains or loss percentage
tickers <- names(stocks)
for (i in 1:length(tickers)){
stocks[i] <- Delt(stocks[i])
for (j in 1:6){
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -j)
}
}
View(stocks)
## downloads historic prices for all constituents of SP500
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
#Setting Working Directory
## specify time period
dateStart <- "2012-01-01"
dateEnd <- Sys.Date()
## extract symbols and number of iterations
symbols <- c("DIS", "CMCSA", "TWX", "SNE", "FOXA", "VIAB")
nAss <- length(symbols)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = symbols[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(symbols[1])
## download remaining assets in for loop
for (i in 2:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = symbols[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
#Create data in forms of returns
library(zoo)
library(reshape)
library(DataCombine)
#Calculating daily gains or loss percentage
tickers <- names(stocks)
for (i in 1:length(tickers)){
#stocks[i] <- Delt(stocks[i])
for (j in 1:6){
stocks[i] <- Delt(stocks[i])
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -j)
}
}
View(stocks)
## downloads historic prices for all constituents of SP500
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
#Setting Working Directory
## specify time period
dateStart <- "2012-01-01"
dateEnd <- Sys.Date()
## extract symbols and number of iterations
symbols <- c("DIS", "CMCSA", "TWX", "SNE", "FOXA", "VIAB")
nAss <- length(symbols)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = symbols[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(symbols[1])
## download remaining assets in for loop
for (i in 2:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = symbols[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
## downloads historic prices for all constituents of SP500
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
#Setting Working Directory
## specify time period
dateStart <- "2012-01-01"
dateEnd <- Sys.Date()
## extract symbols and number of iterations
symbols <- c("DIS", "CMCSA", "TWX", "SNE", "FOXA", "VIAB")
nAss <- length(symbols)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = symbols[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(symbols[1])
## download remaining assets in for loop
for (i in 2:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = symbols[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
View(stocks)
#Create data in forms of returns
library(zoo)
library(reshape)
library(DataCombine)
#Calculating losses and gains
tickers <- names(stocks)
#Take lags of stock time series variable
for (i in 1:length(tickers)){
#stocks[i] <- Delt(stocks[i])
for (j in 1:6){
stocks[i] <- Delt(stocks[i])
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -j)
}
}
View(stocks)
?Delt
## downloads historic prices for all constituents of SP500
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
#Setting Working Directory
## specify time period
dateStart <- "2012-01-01"
dateEnd <- Sys.Date()
## extract symbols and number of iterations
symbols <- c("DIS", "CMCSA", "TWX", "SNE", "FOXA", "VIAB")
nAss <- length(symbols)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = symbols[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(symbols[1])
## download remaining assets in for loop
for (i in 2:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = symbols[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
View(stocks)
#Create data in forms of returns
library(zoo)
library(reshape)
library(DataCombine)
#Calculating losses and gains
tickers <- names(stocks)
#Take lags of stock time series variable
for (i in 1:length(tickers)){
#stocks[i] <- Delt(stocks[i])
for (j in 1:6){
stocks[i] <- Delt(stocks[i], type='log')
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -j)
}
}
View(stocks)
## downloads historic prices for all constituents of SP500
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
#Setting Working Directory
## specify time period
dateStart <- "2012-01-01"
dateEnd <- Sys.Date()
## extract symbols and number of iterations
symbols <- c("DIS", "CMCSA", "TWX", "SNE", "FOXA", "VIAB")
nAss <- length(symbols)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = symbols[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(symbols[1])
## download remaining assets in for loop
for (i in 2:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = symbols[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
View(stocks)
#Take lags of stock time series variable
for (i in 1:length(tickers)){
#stocks[i] <- Delt(stocks[i])
for (j in 1:6){
stocks[i] <- Delt(stocks[i], type='log')
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -j)
}
}
View(stocks)
#Take lags of stock time series variable
for (i in 1:length(tickers)){
#stocks[i] <- Delt(stocks[i])
for (j in 1:6){
stocks[i] <- Delt(stocks[i])
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -j)
}
}
View(stocks)
## downloads historic prices for all constituents of SP500
library(zoo)
library(tseries)
## read in list of constituents, with company name in first column and
## ticker symbol in second column
#Setting Working Directory
## specify time period
dateStart <- "2012-01-01"
dateEnd <- Sys.Date()
## extract symbols and number of iterations
symbols <- c("DIS", "CMCSA", "TWX", "SNE", "FOXA", "VIAB")
nAss <- length(symbols)
## download data on first stock as zoo object
z <- get.hist.quote(instrument = symbols[1], start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T)
## use ticker symbol as column name
dimnames(z)[[2]] <- as.character(symbols[1])
## download remaining assets in for loop
for (i in 2:nAss) {
## display progress by showing the current iteration step
cat("Downloading ", i, " out of ", nAss , "\n")
result <- try(x <- get.hist.quote(instrument = symbols[i],
start = dateStart,
end = dateEnd, quote = "AdjClose",
retclass = "zoo", quiet = T))
if(class(result) == "try-error") {
next
}
else {
dimnames(x)[[2]] <- as.character(symbols[i])
## merge with already downloaded data to get assets on same dates
z <- merge(z, x)
}
}
## save data
stocks <- as.data.frame(z)
setwd("~/Documents/HollywoodModels/0. Data/1. Raw Data ")
write.csv(stocks,"EntertainmentStockPrices.csv")
#Create data in forms of returns
library(zoo)
library(reshape)
library(DataCombine)
#Calculating losses and gains
tickers <- names(stocks)
#Take lags of stock time series variable
for (i in 1:length(tickers)){
#stocks[i] <- Delt(stocks[i])
for (j in 1:6){
stocks[i] <- Delt(stocks[i])
stocks <- slide(stocks, Var = names(stocks[i]), slideBy = -j)
}
}
View(stocks)
stocks$DIS[stocks$DIS > 0] <- 1
View(stocks)
stocks$DIS[stocks$DIS < 0] <- 0
View(stocks)
